/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/admin/poll/index.js":
/*!******************************************!*\
  !*** ./resources/js/admin/poll/index.js ***!
  \******************************************/
/***/ (() => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar table = \"\";\nvar ids = [];\n$(function () {\n  handleDataTable();\n  handleSelectedMatch();\n  handleSelectedStatus();\n  checkActionBtn();\n  actionBtns();\n});\nhandleSelectedStatus = function handleSelectedStatus() {\n  $(document).on('change', '#poll_status', function () {\n    var match_id = $('#match_id').val();\n    var match_day = $('#match_day').val();\n    var status = $(this).val();\n    table.destroy();\n    handleDataTable(match_id, match_day, status);\n  });\n};\nactionBtns = function actionBtns() {\n  $(document).on('click', '.activeBtn', function (e) {\n    e.preventDefault();\n    if (ids.length == 0) {\n      Toast.fire({\n        icon: 'error',\n        title: 'Please select at least one item'\n      });\n    }\n    sendActionBackend('active');\n  });\n  $(document).on('click', '.inactiveBtn', function (e) {\n    e.preventDefault();\n    if (ids.length == 0) {\n      Toast.fire({\n        icon: 'error',\n        title: 'Please select at least one item'\n      });\n    }\n    sendActionBackend('inactive');\n  });\n  $(document).on('click', '.multiDeleteBtn', function (e) {\n    e.preventDefault();\n    if (ids.length == 0) {\n      Toast.fire({\n        icon: 'error',\n        title: 'Please select at least one item'\n      });\n    }\n    sendActionBackend('delete');\n  });\n  $(document).on('click', '#refresh_poll', function (e) {\n    e.preventDefault();\n    $('#match_id').val('');\n    $('#match_day').val('');\n    $('#poll_status').val('');\n    var match_id = $('#match_id').val();\n    var match_day = $('#match_day').val();\n    var status = $('#poll_status').val();\n    ids = [];\n    setTimeout(function () {\n      $(\"#checkboxAll\").prop('checked', false);\n      $(\"#checkboxAll\").removeClass('selected');\n    }, 700);\n    table.destroy();\n    handleDataTable(match_id, match_day, status);\n  });\n};\nsendActionBackend = function sendActionBackend(action) {\n  axios.post('/poll/actions', {\n    pollIds: ids,\n    action: action\n  }).then(function (response) {\n    table.ajax.reload();\n    ids = [];\n    checkActionBtn();\n    setTimeout(function () {\n      $(\"#checkboxAll\").prop('checked', false);\n      $(\"#checkboxAll\").removeClass('selected');\n    }, 700);\n  });\n};\ncheckActionBtn = function checkActionBtn() {\n  if (ids.length > 0) {\n    $('.actions').removeClass('d-none');\n  } else {\n    $('.actions').addClass('d-none');\n  }\n  return true;\n};\nhandleSelectedMatch = function handleSelectedMatch() {\n  $(document).on('change', '#match_id', function () {\n    var match_id = $(this).val();\n    var timeDiff = $(this).find(':selected').data('timediff');\n    $(\"#match_day\").removeClass('d-none');\n    $('#match_day').empty();\n    $('#match_day').append(\"<option value=\\\"\\\" selected disabled>Select Day</option>\");\n    for (var day = 1; day <= timeDiff; day++) {\n      $('#match_day').append(\"<option value=\\\"\".concat(day, \"\\\">Day-\").concat(day, \"</option>\"));\n    }\n    $(\"#poll_status\").val(\"\");\n    table.destroy();\n    handleDataTable(match_id);\n  });\n  $(document).on('change', '#match_day', function () {\n    var match_id = $('#match_id').val();\n    var day = $(this).val();\n    $(\"#poll_status\").val(\"\");\n    table.destroy();\n    handleDataTable(match_id, day);\n  });\n};\nhandleDataTable = function handleDataTable() {\n  var match_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var day = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var url = match_id ? \"/admin/poll/\".concat(match_id, \"/\") : \"/admin/poll/\";\n  url = day ? \"\".concat(url).concat(day, \"/\") : url;\n  url = status ? \"/admin/poll/\".concat(match_id, \"/\").concat(day, \"/\").concat(status) : url;\n  table = $('.poll_datatable').DataTable({\n    processing: true,\n    serverSide: true,\n    ajax: url,\n    buttons: [{\n      text: 'Select all',\n      action: function action() {\n        table.rows().select();\n      }\n    }, {\n      text: 'Select none',\n      action: function action() {\n        table.rows().deselect();\n      }\n    }],\n    columns: [{\n      render: function render(data, type, row) {\n        var checkItem = '';\n        if (ids.includes(row.id)) {\n          checkItem = \"\\n                            <div class=\\\"icheck-info d-inline\\\">\\n                                <input type=\\\"checkbox\\\" id=\\\"checkboxInfo-\".concat(row.id, \"\\\" class=\\\"checkBoxItem selected\\\" checked=\\\"\\\">\\n                                <label for=\\\"checkboxInfo-\").concat(row.id, \"\\\"></label>\\n                            </div>\\n                            \");\n        } else {\n          checkItem = \"\\n                            <div class=\\\"icheck-info d-inline\\\">\\n                                <input type=\\\"checkbox\\\" id=\\\"checkboxInfo-\".concat(row.id, \"\\\" class=\\\"checkBoxItem\\\">\\n                                <label for=\\\"checkboxInfo-\").concat(row.id, \"\\\"></label>\\n                            </div>\\n                            \");\n        }\n        checkActionBtn();\n        return checkItem;\n      },\n      orderable: false,\n      targets: 0\n    }, {\n      render: function render(data, type, row) {\n        return row.DT_RowIndex;\n      },\n      targets: 0\n    }, {\n      render: function render(data, type, row) {\n        var title = \"<a href=\\\"/match/\".concat(row.match.id, \"/view\\\">\").concat(row.match.title, \"</a>\");\n        return title;\n      },\n      targets: 0\n    }, {\n      render: function render(data, type, row) {\n        return \"Day-\" + row.day;\n      },\n      targets: 0\n    }, {\n      render: function render(data, type, row) {\n        return row.question;\n      },\n      targets: 0\n    }, {\n      render: function render(data, type, row) {\n        if (row.option_type == \"text\") {\n          if (row.answer == 'option_1') {\n            return row.option_1;\n          } else if (row.answer == 'option_2') {\n            return row.option_2;\n          } else if (row.answer == 'option_3') {\n            return row.option_3;\n          } else if (row.answer == 'option_4') {\n            return row.option_4;\n          } else {\n            return 'Not Set';\n          }\n        } else {\n          for (var index = 1; index <= 4; index++) {\n            var isAnswerOption = row.answer == 'option_' + index ? true : false;\n            var option = index == 1 ? row.option_1 : index == 2 ? row.option_2 : index == 3 ? row.option_3 : row.option_4;\n            if (isAnswerOption) {\n              var image = \"\\n                                    <a class=\\\"example-image-link\\\" href=\\\"\".concat(option, \"\\\" data-lightbox=\\\"example-set\\\"\\n                                        data-title=\\\"Click the right half of the image to move forward.\\\">\\n                                        <img class=\\\"example-image p-2 bd-3\\\" height=\\\"75\\\"\\n                                            width=\\\"75\\\" src=\\\"\").concat(option, \"\\\" alt=\\\"\\\" />\\n                                    </a>\\n                                    \");\n              return image;\n            } else {\n              return 'Not Set';\n            }\n          }\n        }\n      },\n      targets: 0\n    }, {\n      render: function render(data, type, row) {\n        var status = row.status == 'active' ? \"<span class=\\\"badge badge-success\\\">Active</span>\" : \"<span class=\\\"badge badge-danger\\\">Inactive</span>\";\n        return status;\n      },\n      targets: 0\n    }, {\n      render: function render(data, type, row) {\n        return row.created_by.name;\n      },\n      targets: 0\n    }, {\n      render: function render(data, type, row) {\n        return row.updated_by.name;\n      },\n      targets: 0\n    }, {\n      render: function render(data, type, row) {\n        return getButtons(\"/poll/admin\", row.id);\n      },\n      targets: 0\n    }]\n  });\n\n  // short false in 1st column\n  handleDeleteBtn(\"poll/admin\");\n\n  // handle check all\n  $(document).on('change', '#checkboxAll', function () {\n    if ($(this).is(':checked')) {\n      $(this).addClass('selected');\n      $('.poll_datatable tbody tr').addClass('selected');\n      $('.poll_datatable tbody tr').find('input[type=\"checkbox\"]').prop('checked', true);\n      axios.get(\"/fetch-poll\").then(function (response) {\n        var data = response.data.data;\n        data.forEach(function (element) {\n          ids.push(element.id);\n        });\n        ids = _toConsumableArray(new Set(ids));\n        checkActionBtn();\n      });\n    } else {\n      $(this).removeClass('selected');\n      $('.poll_datatable tbody tr').removeClass('selected');\n      $('.poll_datatable tbody tr').find('input[type=\"checkbox\"]').prop('checked', false);\n      ids = [];\n    }\n    checkActionBtn();\n  });\n\n  // handle check item\n  $(document).on('change', '.checkBoxItem', function () {\n    var singleID = $(this).attr('id').split('-')[1];\n    singleID = parseInt(singleID);\n    if ($(this).is(':checked')) {\n      $(this).closest('tr').addClass('selected');\n      ids.push(singleID);\n    } else {\n      if ($(\"#checkboxAll\").hasClass('selected')) {\n        $(\"#checkboxAll\").prop('checked', false);\n        $(\"#checkboxAll\").removeClass('selected');\n      }\n      $(this).closest('tr').removeClass('selected');\n      ids = ids.filter(function (value, index, arr) {\n        return value != singleID;\n      });\n    }\n    checkActionBtn();\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/admin/poll/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/admin/poll/index.js"]();
/******/ 	
/******/ })()
;